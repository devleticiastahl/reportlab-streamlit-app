"""
Report Lab - Plataforma de An√°lise de Dados e Gera√ß√£o de Relat√≥rios Profissionais

Este aplicativo Streamlit permite:
1. Carregar datasets em CSV ou Excel
2. Visualizar an√°lises explorat√≥rias num√©ricas e categ√≥ricas
3. Gerar relat√≥rios PDF profissionais com estat√≠sticas e visualiza√ß√µes
4. Personalizar relat√≥rios com logo da empresa

Desenvolvido com as bibliotecas:
- Streamlit para interface web
- Pandas para manipula√ß√£o de dados
- Matplotlib/Seaborn para visualiza√ß√µes
- FPDF para gera√ß√£o de relat√≥rios PDF

Autor: Let√≠cia Stahl
Vers√£o: 1.0
Data: 30/03/2025
"""

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from datetime import datetime
from fpdf import FPDF
import base64
from tempfile import NamedTemporaryFile
import os
import matplotlib

# =============================================================================
# CONFIGURA√á√ÉO INICIAL
# =============================================================================

# Configurar backend para evitar problemas de threading
matplotlib.use('Agg')

# Configurar p√°gina do Streamlit
st.set_page_config(
    page_title="Report Lab",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Configurar estilo de gr√°ficos
plt.style.use('default')
sns.set_theme(style="whitegrid")
sns.set_palette(["#1a3a8f", "#1e4ed8", "#2563eb", "#3b82f6", "#93c5fd"])

# =============================================================================
# FUN√á√ïES AUXILIARES
# =============================================================================

@st.cache_data
def load_data(uploaded_file):
    """
    Carrega dados de arquivos CSV ou Excel.
    
    Par√¢metros:
        uploaded_file (UploadedFile): Arquivo carregado via Streamlit
    
    Retorna:
        DataFrame: Dados carregados ou None em caso de erro
    """
    try:
        if uploaded_file.name.endswith('.csv'):
            return pd.read_csv(uploaded_file)
        elif uploaded_file.name.endswith(('.xlsx', '.xls')):
            return pd.read_excel(uploaded_file, engine='openpyxl')
    except Exception as e:
        st.error(f"Erro ao ler arquivo: {str(e)}")
        return None

def create_pdf_report(df, logo_path, num_images=[], cat_images=[], filename="relatorio.pdf"):
    """
    Gera relat√≥rio PDF profissional com an√°lise de dados.
    
    Par√¢metros:
        df (DataFrame): Conjunto de dados a ser analisado
        logo_path (str): Caminho para o arquivo de logo
        num_images (list): Lista de caminhos para imagens de an√°lises num√©ricas
        cat_images (list): Lista de caminhos para imagens de an√°lises categ√≥ricas
        filename (str): Nome do arquivo de sa√≠da
    
    Retorna:
        str: Caminho para o arquivo PDF gerado
    """
    # Configurar PDF em formato paisagem (landscape)
    pdf = FPDF(orientation='L')
    pdf.add_page()
    pdf.set_auto_page_break(auto=True, margin=15)
    pdf.set_font("Arial", size=10)
    
    # Adicionar logo se existir
    if logo_path:
        pdf.image(logo_path, x=10, y=8, w=25)
    
    # T√≠tulo do relat√≥rio
    pdf.set_font("Arial", 'B', 16)
    pdf.cell(0, 15, "Relat√≥rio de An√°lise de Dados", ln=1, align='C')
    pdf.ln(5)
    
    # Informa√ß√µes b√°sicas do dataset
    pdf.set_font("Arial", 'B', 10)
    pdf.cell(0, 8, f"Data do relat√≥rio: {datetime.now().strftime('%d/%m/%Y %H:%M')}", ln=1)
    pdf.cell(0, 8, f"Total de registros: {len(df)}", ln=1)
    pdf.cell(0, 8, f"Total de colunas: {len(df.columns)}", ln=1)
    pdf.cell(0, 8, f"Total de valores faltantes: {df.isnull().sum().sum()}", ln=1)
    pdf.ln(10)
    
    # Se√ß√£o de resumo estat√≠stico
    pdf.set_font("Arial", 'B', 14)
    pdf.cell(0, 10, "Resumo Estat√≠stico", ln=1)
    pdf.set_font("Arial", '', 8)
    
    # Preparar dados estat√≠sticos
    desc_stats = df.describe().T.reset_index()
    desc_stats.columns = ['Coluna', 'Contagem', 'M√©dia', 'Desvio Padr√£o', 'M√≠nimo', '25%', '50%', '75%', 'M√°ximo']
    
    # Configurar layout da tabela
    page_width = 280
    col_widths = [
        page_width * 0.15, page_width * 0.10, page_width * 0.10,
        page_width * 0.12, page_width * 0.10, page_width * 0.10,
        page_width * 0.10, page_width * 0.10, page_width * 0.10
    ]
    
    # Cabe√ßalho da tabela
    headers = desc_stats.columns.tolist()
    pdf.set_fill_color(200, 220, 255)
    for i, header in enumerate(headers):
        pdf.cell(col_widths[i], 8, header, border=1, fill=True, align='C')
    pdf.ln()
    
    # Dados da tabela
    pdf.set_fill_color(255, 255, 255)
    for _, row in desc_stats.iterrows():
        for i, col in enumerate(headers):
            value = row[col]
            if isinstance(value, float):
                value = f"{value:.2f}"
            pdf.cell(col_widths[i], 8, str(value), border=1, align='C')
        pdf.ln()
    
    pdf.ln(10)
    
    # Adicionar visualiza√ß√µes gr√°ficas
    if num_images or cat_images:
        pdf.add_page(orientation='L')
        pdf.set_font("Arial", 'B', 14)
        pdf.cell(0, 10, "Visualiza√ß√µes Gr√°ficas", ln=1)
        pdf.ln(8)
        
        # Gr√°ficos num√©ricos
        if num_images:
            pdf.set_font("Arial", 'B', 12)
            pdf.cell(0, 8, "An√°lise Num√©rica", ln=1)
            pdf.ln(5)
            for img_path in num_images:
                img_width = 260
                x_position = (pdf.w - img_width) / 2
                pdf.image(img_path, x=x_position, w=img_width)
                pdf.ln(5)
        
        # Gr√°ficos categ√≥ricos
        if cat_images:
            pdf.set_font("Arial", 'B', 12)
            pdf.cell(0, 8, "An√°lise Categ√≥rica", ln=1)
            pdf.ln(5)
            for img_path in cat_images:
                img_width = 260
                x_position = (pdf.w - img_width) / 2
                pdf.image(img_path, x=x_position, w=img_width)
                pdf.ln(5)
    
    # Salvar PDF
    pdf.output(filename)
    return filename

def get_binary_file_downloader_html(bin_file, file_label='File'):
    """Gera link HTML para download de arquivo"""
    with open(bin_file, 'rb') as f:
        data = f.read()
    bin_str = base64.b64encode(data).decode()
    return f'<a href="data:application/octet-stream;base64,{bin_str}" download="{os.path.basename(bin_file)}">Download {file_label}</a>'

def save_plot(fig):
    """Salva figura matplotlib em arquivo tempor√°rio"""
    with NamedTemporaryFile(delete=False, suffix='.png') as tmpfile:
        fig.savefig(tmpfile.name, bbox_inches='tight', dpi=150)
        return tmpfile.name

# =============================================================================
# P√ÅGINA INICIAL
# =============================================================================

def show_homepage():
    """Exibe a p√°gina inicial com apresenta√ß√£o do sistema"""
    # CSS personalizado
    st.markdown("""
    <style>
        .title-text {
            font-size: 3.5rem !important;
            font-weight: 800 !important;
            color: #1a3a8f !important;
            text-align: center;
            margin-bottom: 0.5rem;
        }
        
        .subtitle-text {
            font-size: 1.5rem !important;
            text-align: center;
            color: #4b5563 !important;
            margin-bottom: 2rem;
        }
        
        .feature-card {
            border-radius: 12px;
            padding: 1.5rem;
            background-color: #f9fafb;
            box-shadow: 0 4px 6px -1px rgba(0,0,0,0.1);
            transition: all 0.3s ease;
            height: 100%;
        }
        
        .feature-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 15px -3px rgba(0,0,0,0.1);
        }
        
        .feature-icon {
            font-size: 2.5rem;
            margin-bottom: 1rem;
            color: #1a3a8f;
        }
        
        .feature-title {
            font-size: 1.3rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
            color: #1e293b;
        }
        
        .feature-desc {
            color: #64748b;
            font-size: 1rem;
        }
        
        .how-to-title {
            font-size: 2rem;
            font-weight: 700;
            color: #1e293b;
            text-align: center;
            margin: 3rem 0 1.5rem 0;
        }
        
        .step-card {
            border-left: 4px solid #1a3a8f;
            padding: 1.5rem;
            background-color: #f0f9ff;
            border-radius: 0 8px 8px 0;
            margin-bottom: 1.5rem;
        }
        
        .step-number {
            font-size: 1.8rem;
            font-weight: 800;
            color: #1a3a8f;
            margin-bottom: 0.5rem;
        }
        
        .step-title {
            font-size: 1.2rem;
            font-weight: 700;
            color: #1e293b;
            margin-bottom: 0.5rem;
        }
        
        .step-desc {
            color: #475569;
        }
        
        .cta-button {
            display: block;
            width: 100%;
            padding: 1rem;
            font-size: 1.2rem;
            font-weight: 700;
            text-align: center;
            border-radius: 12px;
            background: linear-gradient(to right, #1a3a8f, #1e4ed8);
            color: white !important;
            margin-top: 2rem;
        }
        
        .cta-button:hover {
            background: linear-gradient(to right, #1e4ed8, #1e40af);
            color: white;
            text-decoration: none;
        }
        
        .hero-section {
            background: linear-gradient(135deg, #f0f9ff 0%, #e0f2fe 100%);
            border-radius: 16px;
            padding: 3rem 2rem;
            margin-bottom: 3rem;
            text-align: center;
        }
    </style>
    """, unsafe_allow_html=True)
    
    # Cabe√ßalho principal
    st.markdown("""
    <div class="hero-section">
        <h1 class="title-text">Report Lab</h1>
        <p class="subtitle-text">Transforme seus dados em relat√≥rios profissionais automaticamente</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Recursos principais
    st.markdown("## ‚ú® Recursos Principais")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("""
        <div class="feature-card">
            <div class="feature-icon">üìä</div>
            <div class="feature-title">An√°lise Automatizada</div>
            <div class="feature-desc">Visualize distribui√ß√µes, tend√™ncias e outliers automaticamente para suas colunas num√©ricas e categ√≥ricas.</div>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div class="feature-card">
            <div class="feature-icon">üìë</div>
            <div class="feature-title">Relat√≥rios em PDF</div>
            <div class="feature-desc">Gere relat√≥rios profissionais em formato paisagem com todos os gr√°ficos e estat√≠sticas organizados.</div>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        st.markdown("""
        <div class="feature-card">
            <div class="feature-icon">‚ö°</div>
            <div class="feature-title">R√°pido e F√°cil</div>
            <div class="feature-desc">Basta carregar seus dados e o relat√≥rio √© gerado em poucos cliques, sem necessidade de configura√ß√£o complexa.</div>
        </div>
        """, unsafe_allow_html=True)
    
    # Chamada para a√ß√£o
    st.markdown("""
    <a href="#como-usar" class="cta-button">
        Comece Agora ‚Üí 
    </a>
    """, unsafe_allow_html=True)
    
    st.markdown("---")
    
    # Instru√ß√µes de uso
    st.markdown('<div class="how-to-title" id="como-usar">üìå Como Funciona</div>', unsafe_allow_html=True)
    step1, step2 = st.columns(2)
    
    with step1:
        st.markdown("""
        <div class="step-card">
            <div class="step-number">1</div>
            <div class="step-title">Carregue seus dados</div>
            <div class="step-desc">No menu lateral, selecione um arquivo CSV ou Excel com seus dados para an√°lise.</div>
        </div>
        """, unsafe_allow_html=True)
        
        st.markdown("""
        <div class="step-card">
            <div class="step-number">2</div>
            <div class="step-title">Adicione sua logo</div>
            <div class="step-desc">Personalize seu relat√≥rio com a logo da sua empresa ou organiza√ß√£o (opcional).</div>
        </div>
        """, unsafe_allow_html=True)
    
    with step2:
        st.markdown("""
        <div class="step-card">
            <div class="step-number">3</div>
            <div class="step-title">Selecione as an√°lises</div>
            <div class="step-desc">Escolha quais colunas analisar e personalize as visualiza√ß√µes conforme necess√°rio.</div>
        </div>
        """, unsafe_allow_html=True)
        
        st.markdown("""
        <div class="step-card">
            <div class="step-number">4</div>
            <div class="step-title">Gere seu relat√≥rio</div>
            <div class="step-desc">Clique no bot√£o para criar e baixar seu relat√≥rio em PDF profissional.</div>
        </div>
        """, unsafe_allow_html=True)

# =============================================================================
# BARRA LATERAL (SIDEBAR)
# =============================================================================

with st.sidebar:
    # Estilos para sidebar
    st.markdown("""
    <style>
        .sidebar-header {
            color: #1a3a8f;
            font-size: 1.5rem;
            font-weight: 700;
            margin-bottom: 1rem;
            text-align: center;
        }
        .sidebar-section {
            padding: 1rem;
            background-color: #f0f9ff;
            border-radius: 12px;
            margin-bottom: 1.5rem;
        }
        .sidebar-section-title {
            font-size: 1.1rem;
            font-weight: 600;
            color: #1a3a8f;
            margin-bottom: 0.5rem;
        }
    </style>
    """, unsafe_allow_html=True)
    
    # T√≠tulo da sidebar
    st.markdown('<div class="sidebar-header">Report Lab</div>', unsafe_allow_html=True)
    st.markdown("<hr>", unsafe_allow_html=True)
    
    # Se√ß√£o de upload de dados
    with st.container():
        st.markdown('<div class="sidebar-section">', unsafe_allow_html=True)
        st.markdown('<div class="sidebar-section-title">1. Carregar Dados</div>', unsafe_allow_html=True)
        uploaded_file = st.file_uploader(
            "Selecione seu arquivo (CSV ou Excel)",
            type=["csv", "xlsx"],
            label_visibility="collapsed"
        )
        st.markdown('</div>', unsafe_allow_html=True)  # Fechar a div da se√ß√£o
    
    # Se√ß√£o de logo
    with st.container():
        st.markdown('<div class="sidebar-section">', unsafe_allow_html=True)
        st.markdown('<div class="sidebar-section-title">2. Adicionar Logo</div>', unsafe_allow_html=True)
        logo_file = st.file_uploader(
            "Envie sua logo (opcional)",
            type=["png", "jpg", "jpeg"],
            label_visibility="collapsed"
        )
        st.markdown('</div>', unsafe_allow_html=True)  # Fechar a div da se√ß√£o

# =============================================================================
# P√ÅGINA PRINCIPAL DE AN√ÅLISE
# =============================================================================

# Exibir p√°gina inicial se nenhum arquivo foi carregado
if not uploaded_file:
    show_homepage()
    st.stop()

# Processamento de dados
df = load_data(uploaded_file)
if df is None:
    st.error("‚ùå N√£o foi poss√≠vel carregar o arquivo. Verifique o formato e tente novamente.")
    st.stop()

st.session_state['df'] = df
st.success(f"‚úÖ Arquivo '{uploaded_file.name}' carregado com sucesso!")

# Processamento de logo
logo_path = None
if logo_file:
    with NamedTemporaryFile(delete=False, suffix='.png') as tmp_file:
        tmp_file.write(logo_file.getvalue())
        logo_path = tmp_file.name
    st.success(f"‚úÖ Logo carregada com sucesso!")

# =============================================================================
# SE√á√ÉO DE VIS√ÉO GERAL
# =============================================================================

st.header("üîç Vis√£o Geral dos Dados")
col1, col2, col3 = st.columns(3)
with col1:
    st.metric("Total de Registros", len(df))
with col2:
    st.metric("Total de Colunas", len(df.columns))
with col3:
    st.metric("Valores Faltantes", df.isnull().sum().sum())

st.subheader("üìÑ Amostra dos Dados")
st.dataframe(df.head(), height=250, use_container_width=True)

# Inicializar listas para armazenar gr√°ficos
num_figs, cat_figs = [], []
num_image_paths, cat_image_paths = [], []

# =============================================================================
# AN√ÅLISE NUM√âRICA
# =============================================================================

numerical_cols = df.select_dtypes(include=np.number).columns.tolist()
if numerical_cols:
    st.header("üìà An√°lise Num√©rica")
    
    # Sele√ß√£o de colunas
    selected_num_cols = st.multiselect(
        "Selecione colunas num√©ricas para an√°lise", 
        numerical_cols,
        help="Selecione v√°rias colunas para an√°lise"
    )
    
    # Gera√ß√£o de gr√°ficos
    for col in selected_num_cols:
        with st.expander(f"An√°lise da coluna: **{col}**", expanded=True):
            col1, col2 = st.columns(2)
            
            # Histograma
            with col1:
                st.subheader(f"Distribui√ß√£o de {col}")
                fig1, ax1 = plt.subplots(figsize=(8, 4))
                sns.histplot(df[col], kde=True, color='#1a3a8f')
                st.pyplot(fig1)
                num_figs.append(fig1)
                plt.close(fig1)
            
            # Boxplot
            with col2:
                st.subheader(f"Boxplot de {col}")
                fig2, ax2 = plt.subplots(figsize=(8, 4))
                sns.boxplot(x=df[col], color='#1e4ed8')
                st.pyplot(fig2)
                num_figs.append(fig2)
                plt.close(fig2)

# =============================================================================
# AN√ÅLISE CATEG√ìRICA
# =============================================================================

categorical_cols = df.select_dtypes(include=['object', 'category']).columns.tolist()
if categorical_cols:
    st.header("üìä An√°lise Categ√≥rica")
    
    # Sele√ß√£o de colunas
    selected_cat_cols = st.multiselect(
        "Selecione colunas categ√≥ricas para an√°lise", 
        categorical_cols,
        help="Selecione v√°rias colunas para an√°lise"
    )
    
    # Configura√ß√£o de top N
    top_n = st.slider("Mostrar top N valores", 5, 20, 10)
    
    # Gera√ß√£o de gr√°ficos
    for col in selected_cat_cols:
        with st.expander(f"An√°lise da coluna: **{col}**", expanded=True):
            counts = df[col].value_counts().nlargest(top_n)
            
            fig, ax = plt.subplots(figsize=(10, 5))
            sns.barplot(x=counts.values, y=counts.index, ax=ax, palette='Blues_d')
            plt.title(f'Top {top_n} Valores em {col}')
            st.pyplot(fig)
            cat_figs.append(fig)
            plt.close(fig)

# =============================================================================
# GERA√á√ÉO DE RELAT√ìRIOS
# =============================================================================

st.markdown("---")
st.header("üì§ Exportar Relat√≥rio")

if st.button("‚ú® Gerar Relat√≥rio em PDF", use_container_width=True, type="primary"):
    if not num_figs and not cat_figs:
        st.warning("‚ö†Ô∏è Selecione pelo menos uma coluna para an√°lise antes de gerar o relat√≥rio!")
    else:
        with st.spinner("Criando relat√≥rio profissional..."):
            # Salvar gr√°ficos temporariamente
            num_image_paths = [save_plot(fig) for fig in num_figs] if num_figs else []
            cat_image_paths = [save_plot(fig) for fig in cat_figs] if cat_figs else []
            
            # Gerar PDF
            report_path = create_pdf_report(
                df, 
                logo_path, 
                num_image_paths, 
                cat_image_paths
            )
            
            st.success("‚úÖ Relat√≥rio gerado com sucesso!")
            
            # Disponibilizar download
            st.markdown(get_binary_file_downloader_html(report_path, 'Relat√≥rio PDF'), unsafe_allow_html=True)
            
            # Limpeza de arquivos tempor√°rios
            if logo_path and os.path.exists(logo_path):
                os.unlink(logo_path)
            for path in num_image_paths + cat_image_paths:
                if os.path.exists(path):
                    os.unlink(path)
