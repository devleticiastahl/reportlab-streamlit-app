"""
Report Lab - Plataforma de An√°lise de Dados e Gera√ß√£o de Relat√≥rios Profissionais

Este aplicativo Streamlit permite:
1. Carregar datasets em CSV ou Excel
2. Visualizar an√°lises explorat√≥rias num√©ricas e categ√≥ricas
3. Gerar relat√≥rios PDF profissionais com estat√≠sticas e visualiza√ß√µes
4. Personalizar relat√≥rios com logo da empresa

Desenvolvido com as bibliotecas:
- Streamlit para interface web
- Pandas para manipula√ß√£o de dados
- Matplotlib/Seaborn para visualiza√ß√µes
- FPDF para gera√ß√£o de relat√≥rios PDF

Autor: Let√≠cia Stahl
Vers√£o: 1.1
Data: 30/03/2025
"""

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from datetime import datetime
from fpdf import FPDF
import base64
from tempfile import NamedTemporaryFile
import os
import matplotlib
import traceback
from io import BytesIO

# =============================================================================
# CONFIGURA√á√ÉO INICIAL
# =============================================================================

# Configurar backend para evitar problemas de threading
matplotlib.use('Agg')

# Configurar p√°gina do Streamlit
st.set_page_config(
    page_title="Report Lab",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Configurar estilo de gr√°ficos
plt.style.use('default')
sns.set_theme(style="whitegrid")
sns.set_palette(["#1a3a8f", "#1e4ed8", "#2563eb", "#3b82f6", "#93c5fd"])

# =============================================================================
# FUN√á√ïES AUXILIARES
# =============================================================================

def cleanup_temp_files(*file_paths):
    """Remove temporary files safely"""
    for path in file_paths:
        if path and os.path.exists(path):
            try:
                os.unlink(path)
            except Exception as e:
                print(f"Warning: Could not delete temp file {path}: {str(e)}")

@st.cache_data
def load_data(uploaded_file):
    """
    Carrega dados de arquivos CSV ou Excel.
    
    Par√¢metros:
        uploaded_file (UploadedFile): Arquivo carregado via Streamlit
    
    Retorna:
        DataFrame: Dados carregados ou None em caso de erro
    """
    try:
        if uploaded_file.name.endswith('.csv'):
            return pd.read_csv(uploaded_file)
        elif uploaded_file.name.endswith(('.xlsx', '.xls')):
            return pd.read_excel(uploaded_file, engine='openpyxl')
    except Exception as e:
        st.error(f"Erro ao ler arquivo: {str(e)}")
        return None

def create_pdf_report(df, logo_path, num_images=[], cat_images=[]):
    """
    Gera relat√≥rio PDF profissional com an√°lise de dados.
    
    Par√¢metros:
        df (DataFrame): Conjunto de dados a ser analisado
        logo_path (str): Caminho para o arquivo de logo
        num_images (list): Lista de caminhos para imagens de an√°lises num√©ricas
        cat_images (list): Lista de caminhos para imagens de an√°lises categ√≥ricas
    
    Retorna:
        bytes: Conte√∫do do PDF em bytes
    """
    # Configurar PDF em formato paisagem (landscape)
    pdf = FPDF(orientation='L')
    pdf.add_page()
    pdf.set_auto_page_break(auto=True, margin=15)
    pdf.set_font("Arial", size=10)
    
    # Adicionar logo se existir
    if logo_path and os.path.exists(logo_path):
        pdf.image(logo_path, x=10, y=8, w=25)
    
    # T√≠tulo do relat√≥rio
    pdf.set_font("Arial", 'B', 16)
    pdf.cell(0, 15, "Relat√≥rio de An√°lise de Dados", ln=1, align='C')
    pdf.ln(5)
    
    # Informa√ß√µes b√°sicas do dataset
    pdf.set_font("Arial", 'B', 10)
    pdf.cell(0, 8, f"Data do relat√≥rio: {datetime.now().strftime('%d/%m/%Y %H:%M')}", ln=1)
    pdf.cell(0, 8, f"Total de registros: {len(df)}", ln=1)
    pdf.cell(0, 8, f"Total de colunas: {len(df.columns)}", ln=1)
    pdf.cell(0, 8, f"Total de valores faltantes: {df.isnull().sum().sum()}", ln=1)
    pdf.ln(10)
    
    # Se√ß√£o de resumo estat√≠stico
    pdf.set_font("Arial", 'B', 14)
    pdf.cell(0, 10, "Resumo Estat√≠stico", ln=1)
    pdf.set_font("Arial", '', 8)
    
    # Preparar dados estat√≠sticos
    desc_stats = df.describe().T.reset_index()
    desc_stats.columns = ['Coluna', 'Contagem', 'M√©dia', 'Desvio Padr√£o', 'M√≠nimo', '25%', '50%', '75%', 'M√°ximo']
    
    # Configurar layout da tabela
    page_width = 280
    col_widths = [
        page_width * 0.15, page_width * 0.10, page_width * 0.10,
        page_width * 0.12, page_width * 0.10, page_width * 0.10,
        page_width * 0.10, page_width * 0.10, page_width * 0.10
    ]
    
    # Cabe√ßalho da tabela
    headers = desc_stats.columns.tolist()
    pdf.set_fill_color(200, 220, 255)
    for i, header in enumerate(headers):
        pdf.cell(col_widths[i], 8, header, border=1, fill=True, align='C')
    pdf.ln()
    
    # Dados da tabela
    pdf.set_fill_color(255, 255, 255)
    for _, row in desc_stats.iterrows():
        for i, col in enumerate(headers):
            value = row[col]
            if isinstance(value, float):
                value = f"{value:.2f}"
            pdf.cell(col_widths[i], 8, str(value), border=1, align='C')
        pdf.ln()
    
    pdf.ln(10)
    
    # Adicionar visualiza√ß√µes gr√°ficas
    if num_images or cat_images:
        pdf.add_page(orientation='L')
        pdf.set_font("Arial", 'B', 14)
        pdf.cell(0, 10, "Visualiza√ß√µes Gr√°ficas", ln=1)
        pdf.ln(8)
        
        # Gr√°ficos num√©ricos
        if num_images:
            pdf.set_font("Arial", 'B', 12)
            pdf.cell(0, 8, "An√°lise Num√©rica", ln=1)
            pdf.ln(5)
            for img_path in num_images:
                if os.path.exists(img_path):
                    img_width = 260
                    x_position = (pdf.w - img_width) / 2
                    pdf.image(img_path, x=x_position, w=img_width)
                    pdf.ln(5)
        
        # Gr√°ficos categ√≥ricos
        if cat_images:
            pdf.set_font("Arial", 'B', 12)
            pdf.cell(0, 8, "An√°lise Categ√≥rica", ln=1)
            pdf.ln(5)
            for img_path in cat_images:
                if os.path.exists(img_path):
                    img_width = 260
                    x_position = (pdf.w - img_width) / 2
                    pdf.image(img_path, x=x_position, w=img_width)
                    pdf.ln(5)
    
    # Retornar PDF como bytes
    return pdf.output(dest='S').encode('latin-1')

def save_plot(fig):
    """Salva figura matplotlib em arquivo tempor√°rio"""
    with NamedTemporaryFile(delete=False, suffix='.png') as tmpfile:
        fig.savefig(tmpfile.name, bbox_inches='tight', dpi=150)
        return tmpfile.name

# =============================================================================
# P√ÅGINA INICIAL (mantida igual)
# =============================================================================

def show_homepage():
    """Exibe a p√°gina inicial com apresenta√ß√£o do sistema"""
    # ... (c√≥digo da homepage mantido igual) ...

# =============================================================================
# BARRA LATERAL (mantida igual)
# =============================================================================

with st.sidebar:
    # ... (c√≥digo da sidebar mantido igual) ...

# =============================================================================
# P√ÅGINA PRINCIPAL DE AN√ÅLISE
# =============================================================================

# Exibir p√°gina inicial se nenhum arquivo foi carregado
if not uploaded_file:
    show_homepage()
    st.stop()

# Processamento de dados
df = load_data(uploaded_file)
if df is None:
    st.error("‚ùå N√£o foi poss√≠vel carregar o arquivo. Verifique o formato e tente novamente.")
    st.stop()

st.session_state['df'] = df
st.success(f"‚úÖ Arquivo '{uploaded_file.name}' carregado com sucesso!")

# Processamento de logo
logo_path = None
if logo_file:
    with NamedTemporaryFile(delete=False, suffix='.png') as tmp_file:
        tmp_file.write(logo_file.getvalue())
        logo_path = tmp_file.name
    st.success(f"‚úÖ Logo carregada com sucesso!")

# =============================================================================
# SE√á√ÉO DE VIS√ÉO GERAL (mantida igual)
# =============================================================================

st.header("Vis√£o Geral dos Dados")
col1, col2, col3 = st.columns(3)
with col1:
    st.metric("Total de Registros", len(df))
with col2:
    st.metric("Total de Colunas", len(df.columns))
with col3:
    st.metric("Valores Faltantes", df.isnull().sum().sum())

st.subheader("Amostra dos Dados")
st.dataframe(df.head(), height=250, use_container_width=True)

# Inicializar listas para armazenar gr√°ficos
num_figs, cat_figs = [], []
num_image_paths, cat_image_paths = [], []

# =============================================================================
# AN√ÅLISE NUM√âRICA (mantida igual)
# =============================================================================

numerical_cols = df.select_dtypes(include=np.number).columns.tolist()
if numerical_cols:
    st.header("üìà An√°lise Num√©rica")
    
    # ... (c√≥digo de an√°lise num√©rica mantido igual) ...

# =============================================================================
# AN√ÅLISE CATEG√ìRICA (mantida igual)
# =============================================================================

categorical_cols = df.select_dtypes(include=['object', 'category']).columns.tolist()
if categorical_cols:
    st.header("üìä An√°lise Categ√≥rica")
    
    # ... (c√≥digo de an√°lise categ√≥rica mantido igual) ...

# =============================================================================
# GERA√á√ÉO DE RELAT√ìRIOS (ATUALIZADA)
# =============================================================================

st.markdown("---")
st.header("üì§ Exportar Relat√≥rio")

if st.button("Gerar Relat√≥rio em PDF", use_container_width=True, type="primary"):
    if not num_figs and not cat_figs:
        st.warning("‚ö†Ô∏è Selecione pelo menos uma coluna para an√°lise antes de gerar o relat√≥rio!")
    else:
        with st.spinner("Criando relat√≥rio profissional..."):
            try:
                # Salvar gr√°ficos temporariamente
                num_image_paths = [save_plot(fig) for fig in num_figs] if num_figs else []
                cat_image_paths = [save_plot(fig) for fig in cat_figs] if cat_figs else []
                
                # Gerar PDF diretamente em mem√≥ria
                pdf_bytes = create_pdf_report(
                    df, 
                    logo_path, 
                    num_image_paths, 
                    cat_image_paths
                )
                
                # Criar bot√£o de download
                st.success("‚úÖ Relat√≥rio gerado com sucesso!")
                
                # M√©todo 1: Download button nativo do Streamlit (funciona na maioria dos navegadores)
                st.download_button(
                    label="‚¨áÔ∏è Baixar Relat√≥rio PDF",
                    data=pdf_bytes,
                    file_name="relatorio_analise.pdf",
                    mime="application/pdf"
                )
                
                # M√©todo 2: Link alternativo para navegadores problem√°ticos
                st.markdown(
                    f'<a href="data:application/pdf;base64,{base64.b64encode(pdf_bytes).decode()}" download="relatorio_analise.pdf">'
                    'üì• Alternativa: Clique aqui para baixar o relat√≥rio</a>',
                    unsafe_allow_html=True
                )
                
            except Exception as e:
                st.error(f"Erro ao gerar relat√≥rio: {str(e)}")
                st.text(traceback.format_exc())  # Mostrar traceback completo para debug
            finally:
                # Limpeza de arquivos tempor√°rios
                all_temp_files = []
                if logo_path:
                    all_temp_files.append(logo_path)
                all_temp_files.extend(num_image_paths)
                all_temp_files.extend(cat_image_paths)
                cleanup_temp_files(*all_temp_files)
